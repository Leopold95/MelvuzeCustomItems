package me.leopold95.melvuzecustomitems.items;

import com.github.sirblobman.combatlogx.api.object.TagReason;
import com.github.sirblobman.combatlogx.api.object.TagType;
import me.leopold95.melvuzecustomitems.CustomItems;
import me.leopold95.melvuzecustomitems.core.Keys;
import me.leopold95.melvuzecustomitems.abstraction.RepeatingTask;
import me.leopold95.melvuzecustomitems.core.Sounds;
import org.bukkit.Bukkit;
import org.bukkit.Color;
import org.bukkit.Particle;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageByBlockEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.entity.EntityPotionEffectEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.persistence.PersistentDataType;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import ru.melvuze.melvuzeitemslib.api.Item;

public class InvulnerabilityItem extends Item implements Listener {
    private CustomItems plugin;

    private final int duration = getConfig().getInt("invulnerability-duration");

    private final Particle.DustOptions option = new Particle.DustOptions(Color.BLACK, 2);
    private final PotionEffect absorbtion = new PotionEffect(PotionEffectType.ABSORPTION, 60, 1);

    private final String blackSkinName = getConfig().getString("black-skin-name");

    public InvulnerabilityItem(CustomItems plugin, String key) {
        super(plugin, key);
        this.plugin = plugin;
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void onRightClick(PlayerInteractEvent playerInteractEvent, Player player, ItemStack itemStack) {
        player.getPersistentDataContainer().set(Keys.INVULNERABILITY_ACTIVE, PersistentDataType.INTEGER, 1);
        Sounds.playTo(player, getConfig().getString("begin-sound"), getConfig().getInt("begin-sound-volume"));

        String type = getConfig().getString("combat-log-x-tag-type");
        String reason = getConfig().getString("combat-log-x-tag-reason");
        plugin.combatLogX.getCombatManager().tag(player, null, TagType.valueOf(type), TagReason.valueOf(reason));

        plugin.skinManager.setNewSkin(player, blackSkinName);
        player.addPotionEffect(absorbtion);

        Bukkit.getScheduler().runTaskLater(plugin, () -> {
            player.getPersistentDataContainer().remove(Keys.INVULNERABILITY_ACTIVE);
            Sounds.playTo(player, getConfig().getString("end-sound"), getConfig().getInt("end-sound-volume"));
            plugin.skinManager.setOldSkin(player);
        }, duration);
    }

    @Override
    public void onLeftClick(PlayerInteractEvent playerInteractEvent, Player player, ItemStack itemStack) {}

    @EventHandler
    private void onBlockDamagePlayer(EntityPotionEffectEvent event){
        if(!(event.getEntity() instanceof Player player))
            return;

        if(player.getPersistentDataContainer().has(Keys.INVULNERABILITY_ACTIVE, PersistentDataType.INTEGER)){
            event.setCancelled(true);
        }
    }

    @EventHandler
    private void onPlayerGotAnyDamage(EntityDamageEvent event){
        if(!(event.getEntity() instanceof Player targetPlayer))
            return;

        if(!targetPlayer.getPersistentDataContainer().has(Keys.INVULNERABILITY_ACTIVE, PersistentDataType.INTEGER))
            return;

        event.setCancelled(true);
    }

    @EventHandler
    private void onBlockDamagePlayer(EntityDamageByBlockEvent event){
        if(!(event.getEntity() instanceof Player targetPlayer))
            return;

        if(!targetPlayer.getPersistentDataContainer().has(Keys.INVULNERABILITY_ACTIVE, PersistentDataType.INTEGER))
            return;

        event.setCancelled(true);

    }

    @EventHandler
    private void onPlayerDamagePlayer(EntityDamageByEntityEvent event){
        if(!(event.getDamager() instanceof Player damager))
            return;

        if(!(event.getEntity() instanceof Player targetPlayer))
            return;

        if(targetPlayer.getPersistentDataContainer().has(Keys.INVULNERABILITY_ACTIVE, PersistentDataType.INTEGER)){
            event.setCancelled(true);
            //damager.sendMessage("u  cant damage this entity");
        }
    }
}

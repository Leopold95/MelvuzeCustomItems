package me.leopold95.melvuzecustomitems.items;

import me.leopold95.melvuzecustomitems.core.Keys;
import me.leopold95.melvuzecustomitems.core.RepeatingTask;
import me.leopold95.melvuzecustomitems.logic.Invulnerability;
import org.bukkit.Bukkit;
import org.bukkit.Color;
import org.bukkit.Particle;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.persistence.PersistentDataType;
import org.bukkit.plugin.Plugin;
import ru.melvuze.melvuzeitemslib.api.Item;

import java.security.Key;

public class InvulnerabilityItem extends Item implements Listener {
    private Invulnerability logic;
    private Plugin plugin;

    public InvulnerabilityItem(Plugin plugin, String key) {
        super(plugin, key);
        this.plugin = plugin;
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        logic = new Invulnerability();
    }

    @Override
    public void onRightClick(PlayerInteractEvent playerInteractEvent, Player player, ItemStack itemStack) {
        int duration = getConfig().getInt("invulnerability-delay-seconds");

        player.getPersistentDataContainer().set(Keys.INVULNER_ABILITY, PersistentDataType.INTEGER, 1);

        Bukkit.getScheduler().runTask(plugin, () -> {
            player.getPersistentDataContainer().remove(Keys.INVULNER_ABILITY);
        });

        beginAnimation(player, duration);
    }

    @Override
    public void onLeftClick(PlayerInteractEvent playerInteractEvent, Player player, ItemStack itemStack) {

    }

    @EventHandler
    private void onPlayerGotDamage(EntityDamageEvent event){
        if(!(event.getEntity() instanceof Player))
            return;

        //player who got damage
        Player player = (Player) event.getEntity();
    }

    @EventHandler
    private void onPlayerDamagePlayer(EntityDamageByEntityEvent event){
        if(!(event.getDamager() instanceof Player damager))
            return;

        if(!(event.getEntity() instanceof Player entity))
            return;

        if(entity.getPersistentDataContainer().has(Keys.INVULNER_ABILITY, PersistentDataType.INTEGER)){
            event.setCancelled(true);
            damager.sendMessage("u  cant damage this entity");
        }
    }

    private void beginAnimation(Player player, int duration){
        new RepeatingTask(plugin, 0, 1) {
            long ticksPassed;
            final Particle.DustOptions option = new Particle.DustOptions(Color.BLACK, 2);

            @Override
            public void run() {
                if(ticksPassed == duration * 20L)
                    canncel();

                player.getLocation().getWorld().spawnParticle(Particle.REDSTONE, player.getLocation(), 2, option);
                player.getLocation().getWorld().spawnParticle(Particle.REDSTONE, player.getLocation().add(0, 2, 0), 2, option);

                player.getLocation().getWorld().spawnParticle(Particle.REDSTONE, player.getLocation().add(.5, 1, .5), 2, option);
                player.getLocation().getWorld().spawnParticle(Particle.REDSTONE, player.getLocation().add(-.5, 1, -.5), 2, option);
                player.getLocation().getWorld().spawnParticle(Particle.REDSTONE, player.getLocation().add(.5, 1, -.5), 2, option);
                player.getLocation().getWorld().spawnParticle(Particle.REDSTONE, player.getLocation().add(-.5, 1, .5), 2, option);

                ticksPassed++;
            }
        };
    }

}
